.groups = "drop"
)
df_avg_largo <- df_avg %>%
pivot_longer(cols = -año, names_to = "variable", values_to = "valor")
# Crear el gráfico
plot <- ggplot(df_avg_largo, aes(x = año, y = valor, color = variable)) +
geom_line() +
geom_point(size = 2) +
facet_wrap(~variable, scales = "free") +
labs(
title = "Evolución de las Variables Numéricas (1995-2022) ",
x = "Año",
y = ""
) +
theme(legend.position = "none",
panel.spacing.x = unit(2, "lines"),
panel.spacing.y = unit(4, "lines"))
# Convertir a objeto plotly
ggplotly(plot)
# Seleccionar las columnas de interés
df_correlacion <- df %>% select(-pais, -año, -region)
# Transformar el DataFrame de formato ancho a formato largo
df_correlacion_largo <-  df_correlacion %>% gather(variable, valor)
# Crear un gráfico de densidad para cada variable
plot <- ggplot(df_correlacion_largo, aes(x = valor, fill = variable)) +
geom_density() +
facet_wrap(~variable, scales = "free") +
labs(x = "",
y = "Densidad") +
theme(legend.position = "none",
panel.spacing.x = unit(1, "lines"),
panel.spacing.y = unit(3, "lines"))
# Convertir a objeto plotly
ggplotly(plot)
df_correlacion <- df %>% select(-pais, -año, -region) %>%
mutate(pib = rescale(log10(pib)),
pib_per_capita = rescale(log10(pib_per_capita))) %>%
mutate_all(~rescale(.))
df_correlacion_largo <- df_correlacion %>%
pivot_longer(cols = -inflacion, names_to = "variable", values_to = "valor")
plot <- ggplot(df_correlacion_largo, aes(x = inflacion, y = valor)) +
geom_bin2d(binwidth = c(0.015, 0.015)) +
scale_fill_gradient(low = "#ada1ff", high = "#df0000") +
labs(
x = "",
y = "") +
ylim(0, 1) +
xlim(0, 1) +
facet_wrap(~variable, scales = "free") +
labs(
title = "Scatterplot de Inflación vs Resto de Variables",
x = "",
y = "") +
theme(legend.position = "none",
panel.spacing.x = unit(2, "lines"),
panel.spacing.y = unit(4, "lines"))
# Convertir a objeto plotly
ggplotly(plot)
df_correlacion <- df %>% select(-pais, -año, -region)
# Crear matrices vacías para almacenar p-valores más bajos, métodos y coeficientes de correlación
n <- ncol(df_correlacion)
metodos <- c("spearman", "pearson")
p_metodo <- matrix(" ", n, n, dimnames = list(names(df_correlacion), names(df_correlacion)))
cor_matrix <- matrix(1, n, n, dimnames = list(names(df_correlacion), names(df_correlacion)))
# Iterar sobre las combinaciones de pares de columnas
for (j in 1:(n-1)) {
for (k in (j+1):n) {
var1 <- names(df_correlacion)[j]
var2 <- names(df_correlacion)[k]
# Aplicar cor.test a cada elemento de la lista y extraer los valores p
p_valores <- sapply(metodos, function(metodo) cor.test(df_correlacion[[var1]], df_correlacion[[var2]], method = metodo, use ="complete.obs")$p.value)
# Identificar el p-valor más bajo y su método
metodo_elegido <- metodos[which.min(p_valores)]
p_valor_minimo <- min(p_valores)
# Calcular el coeficiente de correlación usando el método elegido
correlacion <- cor(df[[var1]], df[[var2]], method = metodo_elegido, use ="complete.obs")
# Almacenar el p-valor más bajo, el método elegido y el coeficiente de correlación
p_metodo[var1, var2] <- metodo_elegido
p_metodo[var2, var1] <- format(p_valor_minimo, digits = 2, scientific = TRUE)
cor_matrix[var1, var2] <- correlacion
cor_matrix[var2, var1] <- correlacion
}
}
p_metodo_df <- melt(p_metodo, varnames = c("Variable1", "Variable2"), value.name = "Valor")
# Crear la visualización
method_plot <- ggplot(data = p_metodo_df, aes(x = Variable1, y = Variable2, fill = Valor)) +
geom_tile(color = "black") +
geom_text(aes(label = Valor),
size = 4,
color = "black") +
scale_fill_manual(values = c("pearson" = "#e033ff", "spearman" = "#fdaf7a"," " = "#e9e9e9"),na.value = "#e0ffbf") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.line = element_line(color = "black"),
panel.background = element_rect(fill = "#f9f9f9", color = NA),
plot.background = element_rect(fill = "#f9f9f9", color = NA),
legend.position = "none") +
labs(title = "Métodos de Correlación Utilizados y sus P-Valores",
x = "",
y = "",
fill = "Método")
method_plot <- ggplotly(method_plot) %>%
layout(autosize = TRUE,
xaxis = list(autorange = TRUE))
method_plot
corrplot <- ggcorrplot(cor_matrix,
method = "circle",
type = "full",
lab = TRUE,
lab_size = 5) +
scale_fill_gradient2(high ="#6400e4",mid="#f9e9e9",low = "#ff0000") +
scale_size_continuous(range = c(8, 25)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_rect(fill = "#f9f9f9", color = NA),
plot.background = element_rect(fill = "#f9f9f9", color = NA),
axis.text = element_text(size = 2),
legend.position = "none")
ggplotly(corrplot)
df_limpio <- df
# Interpolar los NA de la variable deuda
df_limpio <- kNN(df_limpio, variable = "cpi", k = 10)
corr <- cor.test(df_limpio$cpi, df_limpio$inflacion, method = "spearman", use ="complete.obs", exact = FALSE)
cat("p-valor: ",corr$p.value, "\n", "Correlación: ", corr$estimate)
# Interpolar los NA de la variable deuda
df_limpio <- kNN(df_limpio, variable = "deuda", k = 179)
corr<- cor.test(df_limpio$deuda, df_limpio$inflacion, method = "spearman", use ="complete.obs", exact = FALSE)
cat("p-valor: ",corr$p.value, "\n", "Correlación: ", corr$estimate)
# Crear función para evaluar la seed
df_seed <- df_limpio %>%
select(-año, -region, -pais, -deuda_imp, -cpi_imp) %>%
mutate(across(where(is.numeric), rescale)) %>%
drop_na()
probar_seed <- function(seed, df) {
set.seed(seed)
train_index <- createDataPartition(1:nrow(df), p = .75, list = FALSE)
df_train <- df[train_index, ]
df_test <- df[-train_index, ]
mean_train <- min(max(df_train$cpi), max(df_train$pib),max(df_train$ingreso_fiscal),max (df_train$pib_per_capita),max(df_train$inflacion), max(df_train$deuda))
mean_test <- min(max(df_test$cpi), max(df_test$pib),max(df_test$ingreso_fiscal),max (df_test$pib_per_capita),max(df_test$inflacion), max(df_test$deuda))
metrica <- (mean_train + mean_test) / 2
return(metrica)
}
# Inicializar variables
mejor_metrica <- 0
# Bucle para encontrar la mejor seed
for (seed in 1:1000) {
metrica <- probar_seed(seed, df_seed)
if (metrica > mejor_metrica) {
mejor_metrica <- metrica
mejor_seed <- seed
}
}
cat("Mejor seed:", mejor_seed , "\n")
cat("Mejor métrica:", mejor_metrica )
# Dividir df_limpio en train y test
set.seed(186)
df_limpio <- df_limpio %>%
select(-año, -deuda_imp, -cpi_imp) %>%
mutate(across(where(is.numeric), rescale)) %>%
drop_na()
train_index <- createDataPartition(1:nrow(df_limpio), p = .75, list = FALSE)
df_train <- df_limpio[train_index, ]
df_test <- df_limpio[-train_index, ]
# Contar valores
cat("Número de observaciones en el conjunto de entrenamiento:", nrow(df_train), "\n")
cat("Número de observaciones en el conjunto de prueba:", nrow(df_test), "\n")
# Resumen de los conjuntos de entrenamiento y prueba
summary(df_train)
summary(df_test)
# Ajuste manual del número óptimo de árboles (ntree)
df_rmse <- data.frame(seed = integer(), n_arboles = integer(), rmse = numeric())
# Función para entrenar el modelo y calcular el RMSE
calcular_rmse <- function(n_arb, df_train, df_test) {
rf_model_temp <- randomForest(inflacion ~ pais + region + ingreso_fiscal + pib + pib_per_capita + cpi + deuda,
data = df_train,
ntree = n_arb,
mtry = 3,
nodesize = 5)
pred_temp <- predict(rf_model_temp, df_test)
rmse_temp <- sqrt(mean((df_test$inflacion - pred_temp)^2))
return(rmse_temp)
}
include_graphics("rmse.png")
# Ajustar el modelo con la semilla y el número óptimo de árboles
set.seed(4)
# Ajustar el modelo con el número óptimo de árboles
rf_model_opt <- randomForest(inflacion ~ pais + region + ingreso_fiscal + pib + pib_per_capita + cpi + deuda,
data = df_train,
ntree = 16,
mtry = 3 ,
nodesize = 5)
# Resumen del modelo
print(rf_model_opt)
# Predecir la inflación en el conjunto de prueba
predicciones_opt <- predict(rf_model_opt, df_test)
# Evaluar el rendimiento del modelo optimizado (ejemplo con RMSE)
rmse_opt <-sqrt(mean((df_test$inflacion - predicciones_opt)^2))
cat("RMSE del modelo optimizado:", rmse_opt, "\n")
# Crear un gráfico de dispersión de los valores reales vs. las predicciones
df_pred <- data.frame(real = df_test$inflacion, prediccion = predicciones_opt, error_porcentual = (df_test$inflacion - predicciones_opt) / df_test$inflacion * 100)
plot <- ggplot(df_pred, aes(x = real, y = prediccion)) +
geom_point(color = "#4400a4", alpha=0.5) +
geom_abline(intercept = 0, slope = 1, color = "red") +
ylim(0, max(df_pred$real)) +
xlim(0, max(df_pred$real)) +
labs(title = "Valores Reales vs. Predicciones",
x = "Real",
y = "Predicción")
ggplotly(plot)
# Cargar el archivo C++
sourceCpp("cpp/limites.cpp")
# Calcular los límites superior e inferior
limites <- calcular_limites(df_pred$error_porcentual)
IQR <- limites[1]
limite_superior <- limites[2]
limite_inferior <- limites[3]
# Imprimir los resultados
cat("Rango intercuartílico:", IQR, "\n")
cat("Límite superior:", limite_superior, "\n")
cat("Límite inferior:", limite_inferior, "\n")
sourceCpp("cpp/redondear_columna.cpp")
df_pred$error_porcentual <- redondear_columna(df_pred$error_porcentual, limite_superior, limite_inferior)
# Crear un gráfico de densidad del error porcentual
plot1 <- ggplot(df_pred, aes(x = error_porcentual)) +
geom_histogram(fill = "#6600a4", color ="black", bins=24) +
labs(title = "",
x = "Error Porcentual",
y = "") +
scale_x_continuous(breaks = seq(-60, 50, 10)) +
scale_y_continuous(breaks = seq(0, 120, 10))
# Crear un boxplot del error porcentual
plot2 <- ggplot(df_pred, aes(x = "", y = error_porcentual)) +
geom_boxplot(fill = "#cc00a4") +
labs(title = "Histograma y Boxplot del Error Porcentual",
x = "",
y = "")
plot1 <- ggplotly(plot1)
plot2 <- ggplotly(plot2)
# Juntar los gráficos
plot <- subplot(plot1, plot2, nrows = 1, shareX = TRUE, shareY = FALSE) %>% layout(autosize = TRUE)
plot
# Importancia de las variables usando IncNodePurity
importancia <- importance(rf_model_opt)
importancia_df <- data.frame(variable = rownames(importancia),
importancia = importancia[, "IncNodePurity"])
plot <- ggplot(importancia_df, aes(x = reorder(variable, importancia), y = importancia, fill=variable)) +
geom_bar(stat = "identity" ) +
coord_flip() +
#                               cpi      deuda ingreso_fiscal   pais       pib    pib_per_capita   region
scale_fill_manual(values = c("#297bcb","#184d80", "#339aff", "#050555", "#1e63a7",  "#227aee",   "#010111")) +
labs(title = "Importancia de las Variables",
x = "",
y = "Incremento en Pureza del Nodo") +
theme(legend.position = "none")
plot <- ggplotly(plot) %>% layout(autosize = TRUE)
plot
# Importancia de las variables usando IncNodePurity
importancia <- importance(rf_model_opt)
importancia_df <- data.frame(variable = rownames(importancia),
importancia = importancia[, "IncNodePurity"])
plot <- ggplot(importancia_df, aes(x = reorder(variable, importancia), y = importancia, fill=variable)) +
geom_bar(stat = "identity" ) +
coord_flip() +
#                               cpi      deuda ingreso_fiscal   pais       pib    pib_per_capita   region
scale_fill_manual(values = c("#339aff","#184d80", "#297bcb", "#050555", "#1e63a7",  "#227aee",   "#010111")) +
labs(title = "Importancia de las Variables",
x = "",
y = "Incremento en Pureza del Nodo") +
theme(legend.position = "none")
plot <- ggplotly(plot) %>% layout(autosize = TRUE)
plot
# Importancia de las variables usando IncNodePurity
importancia <- importance(rf_model_opt)
importancia_df <- data.frame(variable = rownames(importancia),
importancia = importancia[, "IncNodePurity"])
plot <- ggplot(importancia_df, aes(x = reorder(variable, importancia), y = importancia, fill=variable)) +
geom_bar(stat = "identity" ) +
coord_flip() +
#                               cpi      deuda  ingreso_fiscal  pais       pib    pib_per_capita   region
scale_fill_manual(values = c("#184d80","#297bcb", "#339aff", "#050555", "#1e63a7",  "#227aee",   "#010111")) +
labs(title = "Importancia de las Variables",
x = "",
y = "Incremento en Pureza del Nodo") +
theme(legend.position = "none")
plot <- ggplotly(plot) %>% layout(autosize = TRUE)
plot
# Importancia de las variables usando IncNodePurity
importancia <- importance(rf_model_opt)
importancia_df <- data.frame(variable = rownames(importancia),
importancia = importancia[, "IncNodePurity"])
plot <- ggplot(importancia_df, aes(x = reorder(variable, importancia), y = importancia, fill=variable)) +
geom_bar(stat = "identity" ) +
coord_flip() +
#                               cpi      deuda  ingreso_fiscal  pais       pib    pib_per_capita   region
scale_fill_manual(values = c("#184d80","#297bcb", "#227aee", "#050555", "#1e63a7", "#339aff" ,   "#010111")) +
labs(title = "Importancia de las Variables",
x = "",
y = "Incremento en Pureza del Nodo") +
theme(legend.position = "none")
plot <- ggplotly(plot) %>% layout(autosize = TRUE)
plot
# Importancia de las variables usando IncNodePurity
importancia <- importance(rf_model_opt)
importancia_df <- data.frame(variable = rownames(importancia),
importancia = importancia[, "IncNodePurity"])
plot <- ggplot(importancia_df, aes(x = reorder(variable, importancia), y = importancia, fill=variable)) +
geom_bar(stat = "identity" ) +
coord_flip() +
#                               cpi      deuda  ingreso_fiscal  pais       pib    pib_per_capita   region
scale_fill_manual(values = c("#1e63a7","#297bcb", "#227aee", "#050555", "#184d80", "#339aff" ,   "#010111")) +
labs(title = "Importancia de las Variables",
x = "",
y = "Incremento en Pureza del Nodo") +
theme(legend.position = "none")
plot <- ggplotly(plot) %>% layout(autosize = TRUE)
plot
# Importancia de las variables usando IncNodePurity
importancia <- importance(rf_model_opt)
importancia_df <- data.frame(variable = rownames(importancia),
importancia = importancia[, "IncNodePurity"])
plot <- ggplot(importancia_df, aes(x = reorder(variable, importancia), y = importancia, fill=variable)) +
geom_bar(stat = "identity" ) +
coord_flip() +
#                               cpi      deuda  ingreso_fiscal  pais       pib    pib_per_capita   region
scale_fill_manual(values = c("#1e63a7","#297bcb", "#225aff", "#050555", "#184d80", "#339aff" ,   "#010111")) +
labs(title = "Importancia de las Variables",
x = "",
y = "Incremento en Pureza del Nodo") +
theme(legend.position = "none")
plot <- ggplotly(plot) %>% layout(autosize = TRUE)
plot
# Importancia de las variables usando IncNodePurity
importancia <- importance(rf_model_opt)
importancia_df <- data.frame(variable = rownames(importancia),
importancia = importancia[, "IncNodePurity"])
plot <- ggplot(importancia_df, aes(x = reorder(variable, importancia), y = importancia, fill=variable)) +
geom_bar(stat = "identity" ) +
coord_flip() +
#                               cpi      deuda  ingreso_fiscal  pais       pib    pib_per_capita   region
scale_fill_manual(values = c("#1e63a7","#297bcb", "#227aee", "#050555", "#184d80", "#339aff" ,   "#010111")) +
labs(title = "Importancia de las Variables",
x = "",
y = "Incremento en Pureza del Nodo") +
theme(legend.position = "none")
plot <- ggplotly(plot) %>% layout(autosize = TRUE)
plot
# Importancia de las variables usando IncNodePurity
importancia <- importance(rf_model_opt)
importancia_df <- data.frame(variable = rownames(importancia),
importancia = importancia[, "IncNodePurity"])
plot <- ggplot(importancia_df, aes(x = reorder(variable, importancia), y = importancia, fill=variable)) +
geom_bar(stat = "identity" ) +
coord_flip() +
#                               cpi      deuda  ingreso_fiscal  pais       pib    pib_per_capita   region
scale_fill_manual(values = c("#1e63a7","#297bcb", "#227aee", "#050555", "#184d80", "#44aaff" ,   "#010111")) +
labs(title = "Importancia de las Variables",
x = "",
y = "Incremento en Pureza del Nodo") +
theme(legend.position = "none")
plot <- ggplotly(plot) %>% layout(autosize = TRUE)
plot
# Crear un gráfico de densidad del error porcentual
plot1 <- ggplot(df_pred, aes(x = error_porcentual)) +
geom_histogram(fill = "#6600a4", color ="black", bins=13) +
labs(title = "",
x = "Error Porcentual",
y = "") +
scale_x_continuous(breaks = seq(-60, 60, 10)) +
scale_y_continuous(breaks = seq(0, 200, 10))
# Crear un boxplot del error porcentual
plot2 <- ggplot(df_pred, aes(x = "", y = error_porcentual)) +
geom_boxplot(fill = "#cc00a4") +
labs(title = "Histograma y Boxplot del Error Porcentual",
x = "",
y = "")
plot1 <- ggplotly(plot1)
plot2 <- ggplotly(plot2)
# Juntar los gráficos
plot <- subplot(plot1, plot2, nrows = 1, shareX = TRUE, shareY = FALSE) %>% layout(autosize = TRUE)
plot
# Crear un gráfico de densidad del error porcentual
plot1 <- ggplot(df_pred, aes(x = error_porcentual)) +
geom_histogram(fill = "#6600a4", color ="black", boundary =0) +
labs(title = "",
x = "Error Porcentual",
y = "") +
scale_x_continuous(breaks = seq(-60, 60, 10)) +
scale_y_continuous(breaks = seq(0, 200, 10))
# Crear un boxplot del error porcentual
plot2 <- ggplot(df_pred, aes(x = "", y = error_porcentual)) +
geom_boxplot(fill = "#cc00a4") +
labs(title = "Histograma y Boxplot del Error Porcentual",
x = "",
y = "")
plot1 <- ggplotly(plot1)
plot2 <- ggplotly(plot2)
# Juntar los gráficos
plot <- subplot(plot1, plot2, nrows = 1, shareX = TRUE, shareY = FALSE) %>% layout(autosize = TRUE)
plot
# Crear un gráfico de densidad del error porcentual
plot1 <- ggplot(df_pred, aes(x = error_porcentual)) +
geom_histogram(bins = 15, fill = "#6600a4", color ="black", boundary =0) +
labs(title = "",
x = "Error Porcentual",
y = "") +
scale_x_continuous(breaks = seq(-60, 60, 10)) +
scale_y_continuous(breaks = seq(0, 200, 10))
# Crear un boxplot del error porcentual
plot2 <- ggplot(df_pred, aes(x = "", y = error_porcentual)) +
geom_boxplot(fill = "#cc00a4") +
labs(title = "Histograma y Boxplot del Error Porcentual",
x = "",
y = "")
plot1 <- ggplotly(plot1)
plot2 <- ggplotly(plot2)
# Juntar los gráficos
plot <- subplot(plot1, plot2, nrows = 1, shareX = TRUE, shareY = FALSE) %>% layout(autosize = TRUE)
plot
# Crear un gráfico de densidad del error porcentual
plot1 <- ggplot(df_pred, aes(x = error_porcentual)) +
geom_histogram(bins = 12, fill = "#6600a4", color ="black", boundary =0) +
labs(title = "",
x = "Error Porcentual",
y = "") +
scale_x_continuous(breaks = seq(-60, 60, 10)) +
scale_y_continuous(breaks = seq(0, 200, 10))
# Crear un boxplot del error porcentual
plot2 <- ggplot(df_pred, aes(x = "", y = error_porcentual)) +
geom_boxplot(fill = "#cc00a4") +
labs(title = "Histograma y Boxplot del Error Porcentual",
x = "",
y = "")
plot1 <- ggplotly(plot1)
plot2 <- ggplotly(plot2)
# Juntar los gráficos
plot <- subplot(plot1, plot2, nrows = 1, shareX = TRUE, shareY = FALSE) %>% layout(autosize = TRUE)
plot
# Crear un gráfico de densidad del error porcentual
plot1 <- ggplot(df_pred, aes(x = error_porcentual)) +
geom_histogram(bins = 12, fill = "#6600a4", color ="black", boundary =1) +
labs(title = "",
x = "Error Porcentual",
y = "") +
scale_x_continuous(breaks = seq(-60, 60, 10)) +
scale_y_continuous(breaks = seq(0, 200, 10))
# Crear un boxplot del error porcentual
plot2 <- ggplot(df_pred, aes(x = "", y = error_porcentual)) +
geom_boxplot(fill = "#cc00a4") +
labs(title = "Histograma y Boxplot del Error Porcentual",
x = "",
y = "")
plot1 <- ggplotly(plot1)
plot2 <- ggplotly(plot2)
# Juntar los gráficos
plot <- subplot(plot1, plot2, nrows = 1, shareX = TRUE, shareY = FALSE) %>% layout(autosize = TRUE)
plot
# Crear un gráfico de densidad del error porcentual
plot1 <- ggplot(df_pred, aes(x = error_porcentual)) +
geom_histogram(bins = 12, fill = "#6600a4", color ="black", boundary =5) +
labs(title = "",
x = "Error Porcentual",
y = "") +
scale_x_continuous(breaks = seq(-60, 60, 10)) +
scale_y_continuous(breaks = seq(0, 200, 10))
# Crear un boxplot del error porcentual
plot2 <- ggplot(df_pred, aes(x = "", y = error_porcentual)) +
geom_boxplot(fill = "#cc00a4") +
labs(title = "Histograma y Boxplot del Error Porcentual",
x = "",
y = "")
plot1 <- ggplotly(plot1)
plot2 <- ggplotly(plot2)
# Juntar los gráficos
plot <- subplot(plot1, plot2, nrows = 1, shareX = TRUE, shareY = FALSE) %>% layout(autosize = TRUE)
plot
# Crear un gráfico de densidad del error porcentual
plot1 <- ggplot(df_pred, aes(x = error_porcentual)) +
geom_histogram(bins = 12, fill = "#6600a4", color ="black") +
labs(title = "",
x = "Error Porcentual",
y = "") +
scale_x_continuous(breaks = seq(-60, 60, 10)) +
scale_y_continuous(breaks = seq(0, 200, 10))
# Crear un boxplot del error porcentual
plot2 <- ggplot(df_pred, aes(x = "", y = error_porcentual)) +
geom_boxplot(fill = "#cc00a4") +
labs(title = "Histograma y Boxplot del Error Porcentual",
x = "",
y = "")
plot1 <- ggplotly(plot1)
plot2 <- ggplotly(plot2)
# Juntar los gráficos
plot <- subplot(plot1, plot2, nrows = 1, shareX = TRUE, shareY = FALSE) %>% layout(autosize = TRUE)
plot
# Crear un gráfico de densidad del error porcentual
plot1 <- ggplot(df_pred, aes(x = error_porcentual)) +
geom_histogram(bins = 13, fill = "#6600a4", color ="black") +
labs(title = "",
x = "Error Porcentual",
y = "") +
scale_x_continuous(breaks = seq(-60, 60, 10)) +
scale_y_continuous(breaks = seq(0, 200, 10))
# Crear un boxplot del error porcentual
plot2 <- ggplot(df_pred, aes(x = "", y = error_porcentual)) +
geom_boxplot(fill = "#cc00a4") +
labs(title = "Histograma y Boxplot del Error Porcentual",
x = "",
y = "")
plot1 <- ggplotly(plot1)
plot2 <- ggplotly(plot2)
# Juntar los gráficos
plot <- subplot(plot1, plot2, nrows = 1, shareX = TRUE, shareY = FALSE) %>% layout(autosize = TRUE)
plot
