ggplot(df_avg_pib_mena, aes(x = año, y = pib, color = region, group = region)) +
geom_line(size = 1.5) +
geom_point(size = 5) +
scale_color_manual(values = brewer.pal(4, "Dark2")[4:4]) +
labs(y = "PIB (US$)",
x = "",
color = "Región")
# Filtrar las regiones SSA y ECA para el lineplot
df_avg_pib_ssa_eca <- df_avg_pib %>% filter(region %in% c("SSA", "ECA"))
# Crear el lineplot para la evolución del PIB de SSA y ECA
ggplot(df_avg_pib_ssa_eca, aes(x = año, y = pib, color = region, group = region)) +
geom_line(size = 1.5) +
geom_point(size = 5) +
scale_color_manual(values = brewer.pal(7, "Dark2")[5:7]) +
labs(x = "Año",
y = "",
color = "Región")
# Crear el lineplot para la evolución del PIB per cápita mundial
ggplot(df_avg_pib, aes(x = año, y = crecimiento_pib, color = region, group = region)) +
geom_line(size = 1.5) +
geom_point(size = 5) +
scale_color_brewer(palette = "Dark2") +
labs(title = "Evolución del PIB per cápita Mundial por Región (1995-2023)",
x = "Año",
y = "Crecimiento del PIB (%)",
color = "Región")
# Calcular el Ingreso Fiscal promedio anual por región
df_median_ingresos_fiscales <- df %>%
group_by(region, año) %>%
summarise(ingresos_fiscales = median(ingresos_fiscales, na.rm = TRUE), .groups = "drop") %>%
ungroup()
# Crear el lineplot para la evolución del Ingreso Fiscal por región
ggplot(df_median_ingresos_fiscales, aes(x = año, y = ingresos_fiscales, color = region, group = region)) +
geom_line(size = 1.5) +
geom_point(size = 5) +
scale_color_brewer(palette = "Dark2") +
labs(title = "Evolución del Ingreso Fiscal por Región",
x = "Año",
y = "Ingreso Fiscal",
color = "Región")
# Calcular el Ingreso Fiscal promedio anual por región
df_median_variacion_ingresos <- df %>%
group_by(region, año) %>%
summarise(variacion_ingresos = median(variacion_ingresos, na.rm = TRUE), .groups = "drop") %>%
ungroup()
# Crear el lineplot para la evolución del Ingreso Fiscal por región
ggplot(df_median_variacion_ingresos, aes(x = año, y = variacion_ingresos, color = region, group = region)) +
geom_line(size = 1.5) +
geom_point(size = 5) +
scale_color_brewer(palette = "Dark2") +
labs(title = "Variación del Ingreso Fiscal por Región",
x = "Año",
y = "Variación Ingreso Fiscal",
color = "Región")
# Boxplot para comparar el Ingreso Fiscal por región
ggplot(df, aes(x = region, y = ingresos_fiscales, fill = region)) +
geom_boxplot() +
scale_fill_brewer(palette = "Dark2") +
labs(title = "Comparación del Ingreso Fiscal por Región",
x = "Región",
y = "Ingreso Fiscal") +
theme(legend.position = "none")
# Filtrar los países de la unión europea
ue <- c("Austria", "Belgium", "Bulgaria", "Croatia", "Cyprus", "Czech Republic", "Denmark", "Estonia", "Finland", "France", "Germany", "Greece", "Hungary", "Ireland", "Italy", "Latvia", "Lithuania", "Luxembourg", "Malta", "Netherlands", "Poland", "Portugal", "Romania", "Slovakia", "Slovenia", "Spain", "Sweden")
# Calcular el Ingreso Fiscal promedio anual
df_median_ingresos_fiscales <- df %>% filter(pais %in% ue) %>%
group_by(año, pais) %>%
summarise(ingresos_fiscales = median(ingresos_fiscales, na.rm = TRUE), .groups = "drop") %>%
ungroup()
# Crear el lineplot para la evolución del Ingreso Fiscal
ggplot(df_median_ingresos_fiscales, aes(x = año, y = ingresos_fiscales, group = pais, color = pais)) +
geom_line(size = 1.5) +
geom_point(size = 5) +
scale_color_brewer(palette = "Dark2") +
labs(title = "Evolución del Ingreso Fiscal por Región",
x = "Año",
y = "Ingreso Fiscal",
color = "Pais" ) +
scale_x_continuous(breaks = seq(1995, 2022, 1))
# Convierto año a factor para poder visualizarlo en el gráfico
df$año <- as.factor(df$año)
# Distribución del Ingreso Fiscal
ggplot(df %>% filter(año == 1995 | año == 2022), aes(x = ingresos_fiscales, fill = año)) +
geom_density(alpha=0.5, size=1) +
labs(title = "Distribución del Ingreso Fiscal",
x = "Ingreso Fiscal",
y = "Frecuencia") +
scale_fill_brewer(palette = "Dark2") +
geom_vline(xintercept = median(df$ingresos_fiscales[df$año == 1995], na.rm = TRUE),
linetype = "dashed", color= "#1b9e77", size = 1.5) +
geom_vline(xintercept = median(df$ingresos_fiscales[df$año == 2022], na.rm = TRUE),
linetype = "dashed", color= "#e6ab02", size = 1.5) +
xlim(0, 70)
# Calculo los valores medios de inflación y puntuación de corrupción por país
df_avg <- df %>%
group_by(pais, region) %>%
summarise(
inflacion = median(inflacion, na.rm = TRUE),
cpi = mean(cpi, na.rm = TRUE), .groups = "drop"
) %>%
arrange(region, pais)
# Nota1: ordeno por región y país para que el hue siga el mismo orden que el resto
# Nota2: utilizo la mediana para la inflación para evitar que valores extremos como los de Bulgaria y Venezuela ya mencionados.
# Crear el scatter plot para visualizar la correlación entre inflación y puntuación de corrupción
# Crear el scatter plot con una línea de regresión única para todas las regiones pero sin el scatter (Quiero una única linea de regresión)
G_inf_corr <- ggplot(df_avg, aes(x = inflacion, y = cpi, color = region)) +
geom_point(size = 5) +
geom_smooth(method = "lm", se = FALSE, linetype = "dashed", size = 2.5, color = "black", formula = y ~ x) +
scale_color_brewer(palette = "Dark2") +
labs(
title = "Correlación entre Inflación y Puntuación de Corrupción por País",
x = "Inflación Mediana",
y = "Puntuación de Corrupción Promedio",
color = "Región"
)
print(G_inf_corr)
# Calcular el coeficiente de correlación de Spearman
corr_test <- cor.test(df$inflacion, df$cpi,
method = "spearman", use = "complete.obs",
exact = FALSE)
# Nota:
# Nota: Me saltaba el error de que no era posible calcular el coeficiente exacto, por lo que lo he puesto en FALSE, es decir, que no se calcula exactamente.
# Definir el nivel de significancia
alpha <- 0.05
# Mostrar los resultados
cat("Coeficiente de Correlación de Spearman's Rank:", corr_test$estimate, "\n")
if (corr_test$p.value < alpha) {
cat("p-valor:", corr_test$p.value, ", Se rechaza la hipótesis nula\n")
} else {
cat("p-valor:", corr_test$p.value, ", No se rechaza la hipótesis nula\n")
}
# Calcular la correlación entre 'inflation' y 'score' por año
correlation_by_year <- df %>%
group_by(año) %>%
summarise(correlation = cor(inflacion, cpi, method = "spearman", use = "complete.obs"))
# Crear un barplot de la correlación por año
ggplot(correlation_by_year, aes(x = año)) +
geom_bar(aes(y = correlation, fill = correlation), stat = "identity", color = "white") +
scale_fill_gradient2(low = "#ff0000", high = "#77ff00", mid = "#6600ff", midpoint = -0.15) +
geom_bar(data = df %>% group_by(año) %>% summarise(median_inflation = median(inflacion, na.rm = TRUE)),
aes(y = median_inflation / 10), stat = "identity", fill = 'blue', alpha = 0.3) +
geom_text(data = df %>% group_by(año) %>% summarise(median_inflation = median(inflacion, na.rm = TRUE)),
aes(y = median_inflation / 10, label = round(median_inflation, 2)), vjust = -0.5, size = 4, color = "#000000") +
geom_text(aes(y = correlation, label = round(correlation, 2)), vjust = 1.1, size = 4) +
scale_color_brewer(palette = "Dark2") +
labs(title = "Correlación entre Inflación y Puntuación de Corrupción por Año",
x = "Año",
y = "              Correlación          Inflación Mediana (Escala 1:10)",
fill = "Correlación")
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(RColorBrewer)
library(ggcorrplot)
library(readxl)
library(plotly)
df <- read.csv("inflation_corruption_1995_2023_Ruben_Valverde.csv")
head(df[0:6])
# Nota: El resto de columnas son repeticiones de las columnas 3, 4 y 5 por lo que mostrarlas no aportan más información y empeoran la estética
summary(df[0:6])
# Contar valores "no data" en cada columna
inflation <- df[, grepl("inflation", names(df))]
no_data_count <- colSums(inflation == "no data", na.rm = TRUE)
print(paste("Hay un total de", sum(no_data_count), "valores 'no data'"))
# Reemplazar los valores "no data" por NA en todo el DataFrame porque da problemas al conteo
df[df == "no data"] <- NA
# Convertir las columnas de inflación de 1995 a 2023 a valores numéricos
for (year in 1995:2023) {
column <- paste("inflation", year, sep = "_")
df[[column]] <- as.numeric(df[[column]])
}
# Contar y mostrar el número de valores nulos por columna
print(paste("Hay un total de", sum(is.na(df)), "valores nulos"))
# Transformar el DataFrame de formato ancho a formato largo para poder analizar los datos de inflación, puntuación y rango a lo largo del tiempo posteriormente
df_melted <- df %>%
pivot_longer(cols = starts_with("inflation_") | starts_with("score_"),
names_to = c(".value", "year"),
names_sep = "_") %>%
select(country, iso, region, year, inflation, score) #Nota el ranking no se llega a utilizar en este análisis asi que lo elimino
# Convertir las columnas 'inflation', 'score' y 'year' a tipo numérico en el DataFrame df_melted
df_melted <- df_melted %>%
mutate(across(c(inflation, score, year), as.numeric))
df_melted <- df_melted %>% arrange(year, country)
head(df_melted)
df_pib <- read.csv('world_development_data_interpolated.csv')[, c(1, 2, 9, 10, 32)]
# Filtrar el DataFrame para eliminar las filas cuyo año sea anterior a 1995
df_pib <- df_pib %>% filter(Year >= 1995)
head(df_pib)
# Crear una lista de correspondencias entre los nombres de países en ambos datasets
country_corrections <- c(
"United States" = "United States of America",
"Russia" = "Russian Federation",
"South Korea" = "Korea, Rep.",
"North Korea" = "Korea, Dem. People's Rep.",
"Iran" = "Iran, Islamic Rep.",
"Egypt" = "Egypt, Arab Rep.",
"Vietnam" = "Viet Nam",
"Syria" = "Syrian Arab Republic",
"Venezuela" = "Venezuela, RB",
"Yemen" = "Yemen, Rep.",
"Gambia" = "Gambia, The",
"Congo (Kinshasa)" = "Congo, Dem. Rep.",
"Congo (Brazzaville)" = "Congo, Rep.",
"Tanzania" = "Tanzania, United Rep.",
"Laos" = "Lao PDR",
"Kyrgyzstan" = "Kyrgyz Republic",
"Slovakia" = "Slovak Republic",
"Brunei" = "Brunei Darussalam",
"Bahamas" = "Bahamas, The",
"Congo" = "Congo, Rep.",
"Côte d'Ivoire" = "Cote d'Ivoire",
"Hong Kong" = "Hong Kong SAR, China",
"Korea (South)" = "Korea, Rep.",
"Saint Lucia" = "St. Lucia",
"Saint Vincent and the Grenadines" = "St. Vincent and the Grenadines",
"Taiwan, China" = "Taiwan"
)
# Reemplazar los nombres de países en df_melted
df_melted$country <- recode(df_melted$country, !!!country_corrections)
# Reemplazar los nombres de países en df_pib
df_pib$Country <- recode(df_pib$Country, !!!country_corrections)
# Unir el DataFrame de inflación y corrupción con el DataFrame de PIB
df <- df_melted %>% left_join(df_pib, by = c("country" = "Country", "year" = "Year"))
# Cambiar el nombre de las columnas de inglés a español
colnames(df) <- c("pais", "iso", "region", "año", "inflacion", "cpi", "pib", "crecimiento_pib", "ingresos_fiscales")
# Multiplicar por 10 el CPI de 1995 hasta 2011
df <- df %>% mutate(cpi = ifelse(año >= 1995 & año <= 2011, cpi * 10, cpi))
# Mostrar un resumen de los ingresos fiscales por país
media_ingresos_fiscales <- df %>% drop_na(ingresos_fiscales) %>% group_by(pais) %>% summarize(media_ingresos_fiscales = mean(ingresos_fiscales, na.rm = TRUE)) %>% arrange(pais) %>% select(pais, media_ingresos_fiscales)
knitr::kable(media_ingresos_fiscales)
df_pfisc <- read_excel("imf-dm-export-20241217.xls")
head(df_pfisc)
# Renombrar la primera columna a pais
colnames(df_pfisc)[1] <- "pais"
# Contar valores "no data" en cada columna
no_data_count <- colSums(df_pfisc == "no data", na.rm = TRUE)
print(paste("Hay un total de", sum(no_data_count), "valores no data"))
# Reemplazar los valores "no data" por NA en todo el DataFrame porque da problemas al conteo
df_pfisc[df_pfisc == "no data"] <- NA
# Contar y mostrar el número de valores nulos por columna
print(paste("Hay un total de", sum(is.na(df_pfisc)), "valores nulos"))
años <- colnames(df_pfisc)[-1]
# Convertir las columnas de ingresos fiscales de 1995 a 2022 a valores numéricos
df_pfisc <- df_pfisc %>% mutate_at(vars(-pais), as.numeric)
# Transformar el DataFrame de formato ancho a formato largo para poder unirlo correctamente con el DataFrame principal
df_pfisc <- df_pfisc %>% pivot_longer(cols = all_of(años), names_to ="año", values_to = "ingresos_fiscales_fmi") %>% mutate(año = as.numeric(año))
head(df_pfisc)
# Mapear los nombres de los países en df_pfisc a los nombres de los países en df
# Crear una lista de correspondencias entre los nombres de países en ambos datasets
country_corrections_pfisc <- c(
"United States" = "United States of America",
"Russia" = "Russian Federation",
"South Korea" = "Korea, Rep.",
"North Korea" = "Korea, Dem. People's Rep.",
"Iran" = "Iran, Islamic Rep.",
"Egypt" = "Egypt, Arab Rep.",
"Vietnam" = "Viet Nam",
"Syria" = "Syrian Arab Republic",
"Venezuela" = "Venezuela, RB",
"Yemen" = "Yemen, Rep.",
"Gambia" = "Gambia, The",
"Congo (Kinshasa)" = "Congo, Dem. Rep.",
"Congo (Brazzaville)" = "Congo, Rep.",
"Tanzania" = "Tanzania, United Rep.",
"Laos" = "Lao PDR",
"Kyrgyzstan" = "Kyrgyz Republic",
"Slovakia" = "Slovak Republic",
"Brunei" = "Brunei Darussalam",
"Bahamas" = "Bahamas, The",
"Congo" = "Congo, Rep.",
"Côte d'Ivoire" = "Cote d'Ivoire",
"Hong Kong" = "Hong Kong SAR, China",
"Korea (South)" = "Korea, Rep.",
"Saint Lucia" = "St. Lucia",
"Saint Vincent and the Grenadines" = "St. Vincent and the Grenadines",
"Taiwan, China" = "Taiwan"
)
# Reemplazar los nombres de países en df_pfisc
df_pfisc$pais <- recode(df_pfisc$pais, !!!country_corrections_pfisc)
df_or <- df
# Unir df y df_pfisc a través de las columnas pais y año
df <- df %>% inner_join(df_pfisc, by = c("pais", "año"))
head(df)
# Scatterplot de los ingresos fiscales por país
# Create separate ggplot objects for each DataFrame
ing_fiscal1 <- ggplot(df,
aes(y = pais, x = ingresos_fiscales_fmi, color = ingresos_fiscales_fmi)) +
geom_point(size = 3, alpha= 0.7) +
scale_color_gradient(low = '#ff7f7f',high ='#750000') +
theme(legend.position = "none",
panel.background = element_rect(fill = "#f0f4f9")) +
labs(title = "Ingresos Fiscales por País",
x = NULL,
y = NULL) +
xlim(0, 70)
ing_fiscal2 <- ggplot(df,
aes(y = pais, x = ingresos_fiscales, color = ingresos_fiscales)) +
geom_point(size = 3) +
scale_color_gradient(low = '#7fcbff',high ='#000175') +
theme(legend.position = "none",
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(title = "Ingresos Fiscales por País",
x = NULL,
y = NULL) +
xlim(0, 70)
# Guardar el gráfico
ggsave("ing_fisc1.png", plot = ing_fiscal1, width = 20, height = 60, units = "cm")
ggsave("ing_fisc2.png", plot = ing_fiscal2, width = 20, height = 60, units = "cm")
# Nota después de guardar los gráficos los he unido en un solo gráfico con un editor de imágenes
# No he conseguido que se muestren los dos gráficos en una sola celda
knitr::include_graphics("ing_fisc.png")
# Eliminar la columna presion_fiscal de df
df <- df %>% select(-ingresos_fiscales)
# Renombrar a ingresos_fiscales_fmi como ingresos_fiscales
colnames(df)[colnames(df) == "ingresos_fiscales_fmi"] <- "ingresos_fiscales"
df <- df %>%
arrange(pais, año) %>%
group_by(pais) %>%
mutate(variacion_ingresos = ingresos_fiscales - lag(ingresos_fiscales))
# Mostrar un resumen de los datos
summary(df)
knitr::kable(df)
# Crear un DataFrame con la inflación promedio anual por región
df_avg_inflation <- df %>%
group_by(region, año) %>%
summarise(inflacion = median(inflacion, na.rm = TRUE), .groups = "drop") %>%
ungroup()
# Nota: Se utilizó la mediana en lugar del promedio para evitar que valores extremos afecten el resultado (Como la inflación de 1995 en Europa Oriental y Asia Central causada por Bulgaria y Venezuela en América)
# Ajustar el tamaño de los gráficos
knitr::opts_chunk$set(fig.width=20, fig.height=6.5)
# Agregar un tema a los gráficos
theme_set(theme_bw())
# Hacer las letras más grandes y los títulos centrados
theme_update(
plot.title = element_text(size = 20, hjust = 0.5),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14),
legend.title = element_text(size = 16),
legend.text = element_text(size = 14)
)
# Crear el lineplot
ggplot(df_avg_inflation, aes(x = año, y = inflacion, color = region, group = region)) +
geom_line(size=1.5) +
scale_y_continuous(limits = c(0, 23)) +
geom_text(data = df_avg_inflation %>% filter(inflacion > 23),
aes(label = round(inflacion, 1), y = 23),
color = "#6464AA", size = 5, vjust = -0.7) +
geom_point(size=5) +
scale_color_brewer(palette = "Dark2") +
labs(title = "Evolución de la Inflación Promedio Anual por Región",
x = "Año",
y = "Inflación Promedio",
color = "Región")
# Calcular el CPI promedio anual por región
df_avg_score <- df %>%
group_by(region, año) %>%
summarise(cpi = mean(cpi, na.rm = TRUE), .groups = "drop") %>%
ungroup()
# Eliminar filas con valores nulos en la columna 'cpi', provocaban warnings
df_avg_score <- df_avg_score %>% drop_na(cpi)
# Crear el lineplot
ggplot(df_avg_score, aes(x = año, y = cpi, color = region, group = region)) +
geom_line(size=1.5) +
geom_point(size=5) +
scale_color_brewer(palette = "Dark2") +
labs(title = "Evolución del Indice de Percepción de Corrupción Promedio Anual (CPI) por Región",
x = "Año",
y = "CPI Promedio",
color = "Región")
# Calcular el PIB y PIB per cápita promedio anual por región
df_avg_pib <- df %>%
group_by(region, año) %>%
summarise(pib = mean(pib, na.rm = TRUE),
crecimiento_pib = mean(crecimiento_pib, na.rm = TRUE), .groups = "drop") %>%
ungroup()
head(df_avg_pib)
# Filtrar las regiones WE/EU, AP, MENA y AME para el lineplot
df_avg_pib_we_eu_ap <- df_avg_pib %>% filter(region %in% c("WE/EU", "AP", "AME"))
# Crear el lineplot para la evolución del PIB de WE/EU, AP y AME
ggplot(df_avg_pib_we_eu_ap, aes(x = año, y = pib, color = region, group = region)) +
geom_line(size = 1.5) +
geom_point(size = 5) +
scale_color_brewer(palette = "Dark2") +
labs(title = "Evolución del PIB de WE/EU, AP, AME, MENA, SSA y ECA",
x = "",
y = "",
color = "Región")
df_avg_pib_mena <- df_avg_pib %>% filter(region %in% c("MENA"))
# Crear el lineplot para la evolución del PIB de MENA
ggplot(df_avg_pib_mena, aes(x = año, y = pib, color = region, group = region)) +
geom_line(size = 1.5) +
geom_point(size = 5) +
scale_color_manual(values = brewer.pal(4, "Dark2")[4:4]) +
labs(y = "PIB (US$)",
x = "",
color = "Región")
# Filtrar las regiones SSA y ECA para el lineplot
df_avg_pib_ssa_eca <- df_avg_pib %>% filter(region %in% c("SSA", "ECA"))
# Crear el lineplot para la evolución del PIB de SSA y ECA
ggplot(df_avg_pib_ssa_eca, aes(x = año, y = pib, color = region, group = region)) +
geom_line(size = 1.5) +
geom_point(size = 5) +
scale_color_manual(values = brewer.pal(7, "Dark2")[5:7]) +
labs(x = "Año",
y = "",
color = "Región")
# Crear el lineplot para la evolución del PIB per cápita mundial
ggplot(df_avg_pib, aes(x = año, y = crecimiento_pib, color = region, group = region)) +
geom_line(size = 1.5) +
geom_point(size = 5) +
scale_color_brewer(palette = "Dark2") +
labs(title = "Evolución del PIB per cápita Mundial por Región (1995-2023)",
x = "Año",
y = "Crecimiento del PIB (%)",
color = "Región")
# Calcular el Ingreso Fiscal promedio anual por región
df_median_ingresos_fiscales <- df %>%
group_by(region, año) %>%
summarise(ingresos_fiscales = median(ingresos_fiscales, na.rm = TRUE), .groups = "drop") %>%
ungroup()
# Crear el lineplot para la evolución del Ingreso Fiscal por región
ggplot(df_median_ingresos_fiscales, aes(x = año, y = ingresos_fiscales, color = region, group = region)) +
geom_line(size = 1.5) +
geom_point(size = 5) +
scale_color_brewer(palette = "Dark2") +
labs(title = "Evolución del Ingreso Fiscal por Región",
x = "Año",
y = "Ingreso Fiscal",
color = "Región")
# Calcular el Ingreso Fiscal promedio anual por región
df_median_variacion_ingresos <- df %>%
group_by(region, año) %>%
summarise(variacion_ingresos = median(variacion_ingresos, na.rm = TRUE), .groups = "drop") %>%
ungroup()
# Crear el lineplot para la evolución del Ingreso Fiscal por región
ggplot(df_median_variacion_ingresos, aes(x = año, y = variacion_ingresos, color = region, group = region)) +
geom_line(size = 1.5) +
geom_point(size = 5) +
scale_color_brewer(palette = "Dark2") +
labs(title = "Variación del Ingreso Fiscal por Región",
x = "Año",
y = "Variación Ingreso Fiscal",
color = "Región")
# Boxplot para comparar el Ingreso Fiscal por región
ggplot(df, aes(x = region, y = ingresos_fiscales, fill = region)) +
geom_boxplot() +
scale_fill_brewer(palette = "Dark2") +
labs(title = "Comparación del Ingreso Fiscal por Región",
x = "Región",
y = "Ingreso Fiscal") +
theme(legend.position = "none")
# Calcular el Ingreso Fiscal promedio anual
df_median_ingresos_fiscales <- df %>%
group_by(año) %>%
summarise(ingresos_fiscales = median(ingresos_fiscales, na.rm = TRUE), .groups = "drop") %>%
ungroup()
# Crear el lineplot para la evolución del Ingreso Fiscal
ev_ing_fisc <- ggplot(df_median_ingresos_fiscales, aes(x = año, y = ingresos_fiscales)) +
geom_line(size = 1.5) +
geom_point(size = 5) +
labs(title = "Evolución del Ingreso Fiscal Mundial",
x = "Año",
y = "Ingreso Fiscal") +
scale_x_continuous(breaks = seq(1995, 2022, 1))
ev_ing_fisc <- plotly(ev_ing_fisc)
# Calcular el Ingreso Fiscal promedio anual
df_median_ingresos_fiscales <- df %>%
group_by(año) %>%
summarise(ingresos_fiscales = median(ingresos_fiscales, na.rm = TRUE), .groups = "drop") %>%
ungroup()
# Crear el lineplot para la evolución del Ingreso Fiscal
ev_ing_fisc <- ggplot(df_median_ingresos_fiscales, aes(x = año, y = ingresos_fiscales)) +
geom_line(size = 1.5) +
geom_point(size = 5) +
labs(title = "Evolución del Ingreso Fiscal Mundial",
x = "Año",
y = "Ingreso Fiscal") +
scale_x_continuous(breaks = seq(1995, 2022, 1))
ev_ing_fisc <- plotly(ev_ing_fisc)
# Calcular el Ingreso Fiscal promedio anual
df_median_ingresos_fiscales <- df %>%
group_by(año) %>%
summarise(ingresos_fiscales = median(ingresos_fiscales, na.rm = TRUE), .groups = "drop") %>%
ungroup()
# Crear el lineplot para la evolución del Ingreso Fiscal
ev_ing_fisc <- ggplot(df_median_ingresos_fiscales, aes(x = año, y = ingresos_fiscales)) +
geom_line(size = 1.5) +
geom_point(size = 5) +
labs(title = "Evolución del Ingreso Fiscal Mundial",
x = "Año",
y = "Ingreso Fiscal") +
scale_x_continuous(breaks = seq(1995, 2022, 1))
ev_ing_fisc <- plotly::ggplotly(ev_ing_fisc)
print(ev_ing_fisc)
# Convierto año a factor para poder visualizarlo en el gráfico
df$año <- as.factor(df$año)
# Distribución del Ingreso Fiscal
ggplot(df %>% filter(año == 1995 | año == 2022), aes(x = ingresos_fiscales, fill = año)) +
geom_density(alpha=0.5, size=1) +
labs(title = "Distribución del Ingreso Fiscal",
x = "Ingreso Fiscal",
y = "Frecuencia") +
scale_fill_brewer(palette = "Dark2") +
geom_vline(xintercept = median(df$ingresos_fiscales[df$año == 1995], na.rm = TRUE),
linetype = "dashed", color= "#1b9e77", size = 1.5) +
geom_vline(xintercept = median(df$ingresos_fiscales[df$año == 2022], na.rm = TRUE),
linetype = "dashed", color= "#e6ab02", size = 1.5) +
xlim(0, 70)
