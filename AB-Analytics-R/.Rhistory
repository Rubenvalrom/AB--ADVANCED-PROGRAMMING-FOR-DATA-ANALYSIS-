df <- df %>%
arrange(pais, año) %>%
group_by(pais) %>%
mutate(
crecimiento_pib = ((pib / (1 + inflacion/100)) / lag(pib)) * 100 - 100
)
# Actualizar el pib quitando la inflación acumulada
df$pib_real <- df$pib / (1 + df$inflacion/100) %>% cumprod()
# Imprimir el resumen del DataFrame
summary(df)
knitr::kable(df)
# Function to create the summarized dataframe
df_line_plot <- function(col, metodo){
df_avg <- df %>%
group_by(region, año) %>%
summarise(!!col := metodo(.data[[col]], na.rm = TRUE), .groups = "drop") %>%
ungroup()
df_avg
}
# Function to create the line plot
line_plot <- function(df, col){
plot <- ggplot(df, aes(x = año, y = .data[[col]], color = region)) +
geom_line(size = 1.5) +
geom_point(size = 3) +
scale_color_brewer(palette = "Dark2")
plot
}
# Function to create the summarized dataframe
df_scatter_plot <- function(col1, col2, metodo1, metodo2){
df_avg <- df %>%
group_by(pais, region) %>%
summarise(!!col1 := metodo1(.data[[col1]], na.rm = TRUE),
!!col2 := metodo2(.data[[col2]], na.rm = TRUE),.groups = "drop") %>%
ungroup()
df_avg
}
# Function to create the scatter plot
scatter_plot <- function(df, col1, col2){
plot <- ggplot(df, aes(x = .data[[col1]], y = .data[[col2]], color = region)) +
geom_point(size = 3, alpha = 0.7) +
geom_smooth(method = "lm", se = FALSE, linetype = "dashed", linewidth = 1, color = "black", formula = y ~ x)
plot
}
df_line <- df_line_plot("inflacion", median)
plot <- line_plot(df_line, "inflacion") +
scale_y_continuous(limits = c(0, 24)) +
geom_text(data = df_line %>% filter(inflacion > 24),
aes(label = round(inflacion), y = 24),
color = "#6464AA", size = 3, vjust = -0.7) +
labs(title = "Evolución de la Inflación Promedio Anual por Región",
x = "Año",
y = "Inflación Promedio",
color = "Región")
plotly::ggplotly(plot)
df_line <- df_line_plot("cpi", mean)
plot <- line_plot(df_line, "cpi")+
labs(title = "Evolución del CPI Promedio Anual por Región",
x = "Año",
y = "CPI Promedio",
color = "Región")
plotly::ggplotly(plot)
# Calcular el PIB y PIB per cápita promedio anual por región
df_line <- df_line_plot("pib", mean)
plot1 <- line_plot(df_line, "pib")+
labs(y = "PIB") +
scale_y_log10()
df_line <- df_line_plot("crecimiento_pib", mean)
plot2 <-line_plot(df_line, "crecimiento_pib")+
labs(x = "Año",
y = "Crecimiento del PIB (%)")
plot <- plotly::subplot(plot1, plot2, nrows = 2, margin = 0.05)
plot <- plot %>% layout(title = list(text = "Evolución del PIB y su Crecimiento por Región", y = 0.985))
plot
df_line <- df_line_plot("ingresos_fiscales", mean)
plot1 <- line_plot(df_line, "ingresos_fiscales")
df_line <- df_line_plot("variacion_ingresos", mean)
plot2 <- line_plot(df_line, "variacion_ingresos")
plot <- plotly::subplot(plot1, plot2, nrows = 2, margin = 0.05)
plot <- plot %>% layout(title = list(text = "Evolución del Ingreso Fiscal por Región", y = 0.985))
plot
# Boxplot para comparar el Ingreso Fiscal por región
plot <- ggplot(df, aes(x = region, y = ingresos_fiscales, fill = region)) +
geom_boxplot() +
geom_violin(alpha = 0.3) +
scale_fill_brewer(palette = "Dark2") +
labs(title = "Comparación del Ingreso Fiscal por Región",
x = "Región",
y = "Ingreso Fiscal") +
theme(legend.position = "none")
plotly::ggplotly(plot)
# Convierto año a factor para poder visualizarlo en el gráfico
df$año <- as.factor(df$año)
# Distribución del Ingreso Fiscal
plot <- ggplot(df %>% filter(año == 1995 | año == 2022), aes(x = ingresos_fiscales, fill = año)) +
geom_density(alpha=0.5, size=1) +
labs(title = "Distribución del Ingreso Fiscal",
x = "Ingreso Fiscal",
y = "Frecuencia") +
scale_fill_brewer(palette = "Dark2") +
geom_vline(xintercept = median(df$ingresos_fiscales[df$año == 1995], na.rm = TRUE),
linetype = "dashed", color= "#1b9e77", size = 1) +
geom_vline(xintercept = median(df$ingresos_fiscales[df$año == 2022], na.rm = TRUE),
linetype = "dashed", color= "#e6ab02", size = 1) +
xlim(0, 70)
plotly::ggplotly(plot)
df_scatter <- df_scatter_plot("inflacion","cpi", median, mean)
plot <- scatter_plot(df_scatter, "inflacion","cpi") +
labs(
title = "Correlación entre Inflación y Puntuación de Corrupción por País",
x = "Inflación Mediana",
y = "Puntuación de Corrupción Promedio",
color = "Región"
)
plotly::ggplotly(plot)
# Calcular los valores medios de inflación y crecimiento del PIB por país
df_scatter <- df_scatter_plot("inflacion","crecimiento_pib", median, mean)
plot <- scatter_plot(df_scatter, "inflacion","crecimiento_pib") +
labs(
title = "Correlación entre Inflación y Crecimiento del PIB por País",
x = "Inflación Mediana",
y = "Crecimiento del PIB Promedio",
color = "Región"
)
plotly::ggplotly(plot)
df_scatter <- df_scatter_plot("cpi","crecimiento_pib", mean, mean)
plot <- scatter_plot(df_scatter, "cpi","crecimiento_pib") +
labs(
title = "Correlación entre el CPI y Crecimiento del PIB",
x = "Puntuación de Corrupción Promedio",
y = "Crecimiento del PIB Promedio",
color = "Región"
)
plotly::ggplotly(plot)
# Seleccionar las columnas de interés
df_correlacion <- df %>% ungroup() %>% select(inflacion, pib, crecimiento_pib, cpi, ingresos_fiscales, variacion_ingresos)
# Calcular la matriz de correlación de Spearman
corr_matrix <- cor(df_correlacion, method = "spearman", use = "complete.obs")
# Función para calcular los p-valores
cor.mtest <- function(mat, method) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], method = method, exact = FALSE)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
# Calcular los p-valores
p_valores <- cor.mtest(df_correlacion, method = "spearman")
corrplot <-ggcorrplot(corr_matrix,
method = "circle",
type = "full",
lab = TRUE,
lab_size = 3,
colors = c("#6D9EC1", "white", "#E46726"),
title = "Matriz de Correlación") +
theme(
panel.background = element_rect(fill = "#f9f9f9", color = NA),
plot.background = element_rect(fill = "#f9f9f9", color = NA),
legend.background = element_rect(fill = "#f9f9f9", color = NA))
ggsave("corrplot.png", plot = corrplot, width = 12, height = 12, units = "cm")
knitr::include_graphics("corrplot.png")
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(RColorBrewer)
library(ggcorrplot)
library(readxl)
library(plotly)
library(paletteer)
library(patchwork)
df <- read.csv("inflation_corruption_1995_2023_Ruben_Valverde.csv")
head(df[0:6])
# Contar valores "no data" en cada columna
inflation <- df[, grepl("inflation", names(df))]
no_data_count <- colSums(inflation == "no data", na.rm = TRUE)
print(paste("Hay un total de", sum(no_data_count), "valores 'no data'"))
# Reemplazar los valores "no data" por NA en todo el DataFrame porque da problemas al conteo
df[df == "no data"] <- NA
# Convertir las columnas de inflación de 1995 a 2023 a valores numéricos
for (year in 1995:2023) {
column <- paste("inflation", year, sep = "_")
df[[column]] <- as.numeric(df[[column]])
}
# Contar y mostrar el número de valores nulos por columna
print(paste("Hay un total de", sum(is.na(df)), "valores nulos"))
# Transformar el DataFrame de formato ancho a formato largo para poder analizar los datos de inflación, puntuación y rango a lo largo del tiempo posteriormente
df_melted <- df %>%
pivot_longer(cols = starts_with("inflation_") | starts_with("score_"),
names_to = c(".value", "year"),
names_sep = "_") %>%
select(country, iso, region, year, inflation, score) #Nota el ranking no se llega a utilizar en este análisis asi que lo elimino
# Convertir las columnas 'inflation', 'score' y 'year' a tipo numérico en el DataFrame df_melted
df_melted <- df_melted %>%
mutate(across(c(inflation, score, year), as.numeric))
df_melted <- df_melted %>% arrange(year, country)
head(df_melted)
df_pib <- read.csv('world_development_data_interpolated.csv')[, c(1, 2, 9, 32)]
# Filtrar el DataFrame para eliminar las filas cuyo año sea anterior a 1995
df_pib <- df_pib %>% filter(Year >= 1995)
head(df_pib)
# Crear una lista de correspondencias entre los nombres de países en ambos datasets
country_corrections <- c(
"United States" = "United States of America",
"Russia" = "Russian Federation",
"South Korea" = "Korea, Rep.",
"North Korea" = "Korea, Dem. People's Rep.",
"Iran" = "Iran, Islamic Rep.",
"Egypt" = "Egypt, Arab Rep.",
"Vietnam" = "Viet Nam",
"Syria" = "Syrian Arab Republic",
"Venezuela" = "Venezuela, RB",
"Yemen" = "Yemen, Rep.",
"Gambia" = "Gambia, The",
"Congo (Kinshasa)" = "Congo, Dem. Rep.",
"Congo (Brazzaville)" = "Congo, Rep.",
"Tanzania" = "Tanzania, United Rep.",
"Laos" = "Lao PDR",
"Kyrgyzstan" = "Kyrgyz Republic",
"Slovakia" = "Slovak Republic",
"Brunei" = "Brunei Darussalam",
"Bahamas" = "Bahamas, The",
"Congo" = "Congo, Rep.",
"Côte d'Ivoire" = "Cote d'Ivoire",
"Hong Kong" = "Hong Kong SAR, China",
"Korea (South)" = "Korea, Rep.",
"Saint Lucia" = "St. Lucia",
"Saint Vincent and the Grenadines" = "St. Vincent and the Grenadines",
"Taiwan, China" = "Taiwan"
)
# Reemplazar los nombres de países en df_melted
df_melted$country <- recode(df_melted$country, !!!country_corrections)
# Reemplazar los nombres de países en df_pib
df_pib$Country <- recode(df_pib$Country, !!!country_corrections)
# Unir el DataFrame de inflación y corrupción con el DataFrame de PIB
df <- df_melted %>% left_join(df_pib, by = c("country" = "Country", "year" = "Year"))
# Cambiar el nombre de las columnas de inglés a español
colnames(df) <- c("pais", "iso", "region", "año", "inflacion", "cpi", "pib", "ingresos_fiscales")
# Multiplicar por 10 el CPI de 1995 hasta 2011
df <- df %>% mutate(cpi = ifelse(año >= 1995 & año <= 2011, cpi * 10, cpi))
df_pfisc <- read_excel("imf-dm-export-20241217.xls")
head(df_pfisc)
# Renombrar la primera columna a pais
colnames(df_pfisc)[1] <- "pais"
# Contar valores "no data" en cada columna
no_data_count <- colSums(df_pfisc == "no data", na.rm = TRUE)
print(paste("Hay un total de", sum(no_data_count), "valores no data"))
# Reemplazar los valores "no data" por NA en todo el DataFrame porque da problemas al conteo
df_pfisc[df_pfisc == "no data"] <- NA
# Contar y mostrar el número de valores nulos por columna
print(paste("Hay un total de", sum(is.na(df_pfisc)), "valores nulos"))
años <- colnames(df_pfisc)[-1]
# Convertir las columnas de ingresos fiscales de 1995 a 2022 a valores numéricos
df_pfisc <- df_pfisc %>% mutate_at(vars(-pais), as.numeric)
# Transformar el DataFrame de formato ancho a formato largo para poder unirlo correctamente con el DataFrame principal
df_pfisc <- df_pfisc %>% pivot_longer(cols = all_of(años), names_to ="año", values_to = "ingresos_fiscales_fmi") %>% mutate(año = as.numeric(año))
head(df_pfisc)
# Mapear los nombres de los países en df_pfisc a los nombres de los países en df
# Crear una lista de correspondencias entre los nombres de países en ambos datasets
country_corrections_pfisc <- c(
"United States" = "United States of America",
"Russia" = "Russian Federation",
"South Korea" = "Korea, Rep.",
"North Korea" = "Korea, Dem. People's Rep.",
"Iran" = "Iran, Islamic Rep.",
"Egypt" = "Egypt, Arab Rep.",
"Vietnam" = "Viet Nam",
"Syria" = "Syrian Arab Republic",
"Venezuela" = "Venezuela, RB",
"Yemen" = "Yemen, Rep.",
"Gambia" = "Gambia, The",
"Congo (Kinshasa)" = "Congo, Dem. Rep.",
"Congo (Brazzaville)" = "Congo, Rep.",
"Tanzania" = "Tanzania, United Rep.",
"Laos" = "Lao PDR",
"Kyrgyzstan" = "Kyrgyz Republic",
"Slovakia" = "Slovak Republic",
"Brunei" = "Brunei Darussalam",
"Bahamas" = "Bahamas, The",
"Congo" = "Congo, Rep.",
"Côte d'Ivoire" = "Cote d'Ivoire",
"Hong Kong" = "Hong Kong SAR, China",
"Korea (South)" = "Korea, Rep.",
"Saint Lucia" = "St. Lucia",
"Saint Vincent and the Grenadines" = "St. Vincent and the Grenadines",
"Taiwan, China" = "Taiwan"
)
# Reemplazar los nombres de países en df_pfisc
df_pfisc$pais <- recode(df_pfisc$pais, !!!country_corrections_pfisc)
df_or <- df
# Unir df y df_pfisc a través de las columnas pais y año
df <- df %>% inner_join(df_pfisc, by = c("pais", "año"))
head(df)
df <- df %>%
arrange(pais, año) %>%
group_by(pais) %>%
mutate(variacion_ingresos = ingresos_fiscales - lag(ingresos_fiscales))
df <- df %>%
arrange(pais, año) %>%
group_by(pais) %>%
mutate(
crecimiento_pib = ((pib / (1 + inflacion/100)) / lag(pib)) * 100 - 100
)
# Actualizar el pib quitando la inflación acumulada
df$pib <- df$pib / (1 + df$inflacion/100) %>% cumprod()
# Imprimir el resumen del DataFrame
summary(df)
knitr::kable(df)
# Function to create the summarized dataframe
df_line_plot <- function(col, metodo){
df_avg <- df %>%
group_by(region, año) %>%
summarise(!!col := metodo(.data[[col]], na.rm = TRUE), .groups = "drop") %>%
ungroup()
df_avg
}
# Function to create the line plot
line_plot <- function(df, col){
plot <- ggplot(df, aes(x = año, y = .data[[col]], color = region)) +
geom_line(size = 1.5) +
geom_point(size = 3) +
scale_color_brewer(palette = "Dark2")
plot
}
# Function to create the summarized dataframe
df_scatter_plot <- function(col1, col2, metodo1, metodo2){
df_avg <- df %>%
group_by(pais, region) %>%
summarise(!!col1 := metodo1(.data[[col1]], na.rm = TRUE),
!!col2 := metodo2(.data[[col2]], na.rm = TRUE),.groups = "drop") %>%
ungroup()
df_avg
}
# Function to create the scatter plot
scatter_plot <- function(df, col1, col2){
plot <- ggplot(df, aes(x = .data[[col1]], y = .data[[col2]], color = region)) +
geom_point(size = 3, alpha = 0.7) +
geom_smooth(method = "lm", se = FALSE, linetype = "dashed", linewidth = 1, color = "black", formula = y ~ x)
plot
}
df_line <- df_line_plot("inflacion", median)
plot <- line_plot(df_line, "inflacion") +
scale_y_continuous(limits = c(0, 24)) +
geom_text(data = df_line %>% filter(inflacion > 24),
aes(label = round(inflacion), y = 24),
color = "#6464AA", size = 3, vjust = -0.7) +
labs(title = "Evolución de la Inflación Promedio Anual por Región",
x = "Año",
y = "Inflación Promedio",
color = "Región")
plotly::ggplotly(plot)
df_line <- df_line_plot("cpi", mean)
plot <- line_plot(df_line, "cpi")+
labs(title = "Evolución del CPI Promedio Anual por Región",
x = "Año",
y = "CPI Promedio",
color = "Región")
plotly::ggplotly(plot)
# Calcular el PIB y PIB per cápita promedio anual por región
df_line <- df_line_plot("pib", mean)
plot1 <- line_plot(df_line, "pib")+
labs(y = "PIB") +
scale_y_log10()
df_line <- df_line_plot("crecimiento_pib", mean)
plot2 <-line_plot(df_line, "crecimiento_pib")+
labs(x = "Año",
y = "Crecimiento del PIB (%)")
plot <- plotly::subplot(plot1, plot2, nrows = 2, margin = 0.05)
plot <- plot %>% layout(title = list(text = "Evolución del PIB y su Crecimiento por Región", y = 0.985))
plot
df_line <- df_line_plot("ingresos_fiscales", mean)
plot1 <- line_plot(df_line, "ingresos_fiscales")
df_line <- df_line_plot("variacion_ingresos", mean)
plot2 <- line_plot(df_line, "variacion_ingresos")
plot <- plotly::subplot(plot1, plot2, nrows = 2, margin = 0.05)
plot <- plot %>% layout(title = list(text = "Evolución del Ingreso Fiscal por Región", y = 0.985))
plot
# Boxplot para comparar el Ingreso Fiscal por región
plot <- ggplot(df, aes(x = region, y = ingresos_fiscales, fill = region)) +
geom_boxplot() +
geom_violin(alpha = 0.3) +
scale_fill_brewer(palette = "Dark2") +
labs(title = "Comparación del Ingreso Fiscal por Región",
x = "Región",
y = "Ingreso Fiscal") +
theme(legend.position = "none")
plotly::ggplotly(plot)
# Convierto año a factor para poder visualizarlo en el gráfico
df$año <- as.factor(df$año)
# Distribución del Ingreso Fiscal
plot <- ggplot(df %>% filter(año == 1995 | año == 2022), aes(x = ingresos_fiscales, fill = año)) +
geom_density(alpha=0.5, size=1) +
labs(title = "Distribución del Ingreso Fiscal",
x = "Ingreso Fiscal",
y = "Frecuencia") +
scale_fill_brewer(palette = "Dark2") +
geom_vline(xintercept = median(df$ingresos_fiscales[df$año == 1995], na.rm = TRUE),
linetype = "dashed", color= "#1b9e77", size = 1) +
geom_vline(xintercept = median(df$ingresos_fiscales[df$año == 2022], na.rm = TRUE),
linetype = "dashed", color= "#e6ab02", size = 1) +
xlim(0, 70)
plotly::ggplotly(plot)
df_scatter <- df_scatter_plot("inflacion","cpi", median, mean)
plot <- scatter_plot(df_scatter, "inflacion","cpi") +
labs(
title = "Correlación entre Inflación y Puntuación de Corrupción por País",
x = "Inflación Mediana",
y = "Puntuación de Corrupción Promedio",
color = "Región"
)
plotly::ggplotly(plot)
# Calcular los valores medios de inflación y crecimiento del PIB por país
df_scatter <- df_scatter_plot("inflacion","crecimiento_pib", median, mean)
plot <- scatter_plot(df_scatter, "inflacion","crecimiento_pib") +
labs(
title = "Correlación entre Inflación y Crecimiento del PIB por País",
x = "Inflación Mediana",
y = "Crecimiento del PIB Promedio",
color = "Región"
)
plotly::ggplotly(plot)
df_scatter <- df_scatter_plot("cpi","crecimiento_pib", mean, mean)
plot <- scatter_plot(df_scatter, "cpi","crecimiento_pib") +
labs(
title = "Correlación entre el CPI y Crecimiento del PIB",
x = "Puntuación de Corrupción Promedio",
y = "Crecimiento del PIB Promedio",
color = "Región"
)
plotly::ggplotly(plot)
# Seleccionar las columnas de interés
df_correlacion <- df %>% ungroup() %>% select(inflacion, pib, crecimiento_pib, cpi, ingresos_fiscales, variacion_ingresos)
# Calcular la matriz de correlación de Spearman
corr_matrix <- cor(df_correlacion, method = "spearman", use = "complete.obs")
# Función para calcular los p-valores
cor.mtest <- function(mat, method) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], method = method, exact = FALSE)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
# Calcular los p-valores
p_valores <- cor.mtest(df_correlacion, method = "spearman")
corrplot <-ggcorrplot(corr_matrix,
method = "circle",
type = "full",
lab = TRUE,
lab_size = 3,
colors = c("#6D9EC1", "white", "#E46726"),
title = "Matriz de Correlación") +
theme(
panel.background = element_rect(fill = "#f9f9f9", color = NA),
plot.background = element_rect(fill = "#f9f9f9", color = NA),
legend.background = element_rect(fill = "#f9f9f9", color = NA))
ggsave("corrplot.png", plot = corrplot, width = 12, height = 12, units = "cm")
knitr::include_graphics("corrplot.png")
# Seleccionar las columnas de interés
df_correlacion <- df %>% ungroup() %>% select(inflacion, pib, crecimiento_pib, cpi, ingresos_fiscales, variacion_ingresos)
# Calcular la matriz de correlación de Spearman
corr_matrix <- cor(df_correlacion, method = "spearman", use = "complete.obs")
# Función para calcular los p-valores
cor.mtest <- function(mat, method) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat <- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], method = method, exact = FALSE)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
# Calcular los p-valores
p_valores <- cor.mtest(df_correlacion, method = "spearman")
p_valores
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(RColorBrewer)
library(ggcorrplot)
library(readxl)
library(plotly)
df <- read.csv(datasets/"inflation_corruption_1995_2023_Ruben_Valverde.csv")
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(RColorBrewer)
library(ggcorrplot)
library(readxl)
library(plotly)
df <- read.csv(datasets/"inflation_corruption_1995_2023_Ruben_Valverde.csv")
df <- read.csv("datasets/inflation_corruption_1995_2023_Ruben_Valverde.csv")
head(df[0:6])
